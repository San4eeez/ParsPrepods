import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
from datetime import datetime, timedelta
import json
import requests
from bs4 import BeautifulSoup
import calendar
import threading
import os
from openpyxl import Workbook
from openpyxl.styles import Font
from openpyxl.utils import get_column_letter
from collections import defaultdict
from openpyxl.styles import PatternFill

# Словарь для преобразования названий месяцев в числовые эквиваленты
month_names = {
    'Январь': 1, 'Февраль': 2, 'Март': 3, 'Апрель': 4, 'Май': 5, 'Июнь': 6,
    'Июль': 7, 'Август': 8, 'Сентябрь': 9, 'Октябрь': 10, 'Ноябрь': 11, 'Декабрь': 12
}

# Словарь для преобразования числовых эквивалентов в названия месяцев на русском
month_names_reverse = {v: k for k, v in month_names.items()}

# Перевод дней недели на русский
weekdays_translation = {
    "Mon": "Пн", "Tue": "Вт", "Wed": "Ср", "Thu": "Чт", "Fri": "Пт", "Sat": "Сб", "Sun": "Вс"
}

# Функция для получения списка понедельников в заданном месяце
def get_mondays_in_month(year, month):
    _, num_days = calendar.monthrange(year, month)
    mondays = []
    for day in range(1, num_days + 1):
        current_date = datetime(year, month, day)
        if current_date.weekday() == 0:  # 0 - понедельник
            mondays.append(current_date)
    return mondays

# Функция для определения семестра
def get_semester(date):
    if date.month >= 9:  # Сентябрь и далее - осенний семестр
        return 'osen'
    else:
        return 'vesna'

# Функция для определения понедельника прошлой недели
def get_last_week_monday():
    today = datetime.now()
    current_weekday = today.weekday()
    days_to_last_monday = (current_weekday + 7) % 7 + 1
    last_monday = today - timedelta(days=days_to_last_monday)
    return last_monday

# Функция для обработки выбранного диапазона месяцев
def process_month_range():
    start_year = int(start_year_combobox.get())
    start_month_name = start_month_combobox.get()
    end_year = int(end_year_combobox.get())
    end_month_name = end_month_combobox.get()

    if start_month_name == "Выберите начальный месяц":
        print("Пожалуйста, выберите начальный месяц.")
        text_box.insert(tk.END, "Пожалуйста, выберите начальный месяц.\n")
        text_box.see(tk.END)
        return

    start_month_num = month_names[start_month_name]

    if end_month_name == "Выберите конечный месяц (опционально)" or end_month_name == "":
        end_year, end_month_num = start_year, start_month_num
    else:
        end_month_num = month_names[end_month_name]

    start_date = datetime(start_year, start_month_num, 1)
    end_date = datetime(end_year, end_month_num, calendar.monthrange(end_year, end_month_num)[1])

    # Если выбран текущий месяц, ограничиваем последний запрос понедельником прошлой недели
    if end_year == datetime.now().year and end_month_num == datetime.now().month:
        end_date = get_last_week_monday()

    print(f"Выбранный диапазон месяцев: от {start_year}-{start_month_name} до {end_year}-{end_month_name}")
    text_box.insert(tk.END, f"Выбранный диапазон месяцев: от {start_year}-{start_month_name} до {end_year}-{end_month_name}\n")
    text_box.see(tk.END)

    # Чтение значений из JSON-файла
    with open('prepod_data.json', 'r', encoding='utf-8') as json_file:
        prepod_data = json.load(json_file)

    # Словарь для хранения результатов
    results = {}

    # Перебор значений и выполнение запросов
    total_prepods = len(prepod_data)
    current_prepod = 0
    progress_bar['maximum'] = total_prepods

    for prepod in prepod_data:
        value = prepod['value']
        fio = prepod['fio']
        if value:  # Пропускаем пустые значения
            lessons_count = {}
            current_date = start_date
            while current_date <= end_date:
                if current_date.weekday() == 0:  # 0 - понедельник
                    semester = get_semester(current_date)
                    url = f'https://e-spo.ru/org/rasp/export/site/index?date={current_date.strftime("%Y-%m-%d")}&pid=1&RaspBaseSearch%5Bgroup_id%5D=&RaspBaseSearch%5Bsemestr%5D={semester}&RaspBaseSearch%5Bprepod_id%5D={value}'
                    response = requests.get(url)
                    html_content = response.text

                    if show_details.get():
                        print(f'{fio} ({value}) для {current_date.strftime("%Y-%m-%d")}: обработан')
                        text_box.insert(tk.END, f'{fio} ({value}) для {current_date.strftime("%Y-%m-%d")}: обработан\n')
                        text_box.see(tk.END)

                    # Парсинг HTML
                    soup = BeautifulSoup(html_content, 'html.parser')

                    # Найти все дни недели
                    days = soup.find_all('div', class_='card h-100')

                    for day in days:
                        day_name = day.find('h5', class_='card-title').text
                        table = day.find('table')
                        rows = table.find_all('tr')[1:]  # Пропускаем заголовок таблицы
                        unique_lessons = {}

                        for row in rows:
                            columns = row.find_all('td')
                            if columns and columns[0].find('p') and not columns[0].find('i', class_='bi-lightning-fill'):
                                lesson_time = columns[0].find('p').text.strip()
                                lesson_details = columns[1].text.strip()
                                lesson_prepod = columns[3].text.strip()
                                lesson_group = columns[1].find('br').next_sibling.strip() if columns[1].find('br') else ''

                                if lesson_prepod == fio:  # Проверяем, что преподаватель совпадает
                                    lesson_key = f"{lesson_time}_{lesson_details}_{lesson_group}"
                                    if lesson_key not in unique_lessons:
                                        unique_lessons[lesson_key] = 1
                                    else:
                                        unique_lessons[lesson_key] += 1

                        lessons_count[day_name] = unique_lessons
                current_date += timedelta(days=1)
            current_prepod += 1
            progress_bar['value'] = current_prepod
            text_box.insert(tk.END, f"Осталось преподавателей для обработки: {total_prepods - current_prepod}\n")
            text_box.see(tk.END)

            results[value] = {
                'fio': fio,
                'lessons_count': lessons_count
            }

    # Сортировка результатов по группе
    sorted_results = {}
    for prepod_id, data in results.items():
        sorted_lessons_count = {}
        for day, lessons in data['lessons_count'].items():
            sorted_lessons = {}
            for lesson_key, count in lessons.items():
                lesson_time, lesson_details, lesson_group = lesson_key.split('_')
                # Удаляем группу из lesson_details
                lesson_details = lesson_details.split('гр.')[0].strip()
                if lesson_group not in sorted_lessons:
                    sorted_lessons[lesson_group] = []
                sorted_lessons[lesson_group].append({
                    'lesson_time': lesson_time,
                    'lesson_details': lesson_details,
                    'count': count
                })
            sorted_lessons_count[day] = sorted_lessons
        sorted_results[prepod_id] = {
            'fio': data['fio'],
            'lessons_count': sorted_lessons_count
        }

    # Сохранение результатов в новый JSON-файл
    with open('lessons_count.json', 'w', encoding='utf-8') as json_file:
        json.dump(sorted_results, json_file, ensure_ascii=False, indent=4)

    print("Результаты успешно сохранены в 'lessons_count.json'")
    text_box.insert(tk.END, "Результаты успешно сохранены в 'lessons_count.json'\n")
    text_box.see(tk.END)

    # Генерация Excel-отчетов
    generate_excel_reports()

# Функция для запуска обработки в отдельном потоке
def start_processing():
    threading.Thread(target=process_month_range).start()

# Функция для обновления данных преподавателей
def update_prepod_data():
    try:
        # URL страницы
        url = 'https://e-spo.ru/org/rasp/export/site/index?pid=1'

        # Получение HTML-кода страницы
        response = requests.get(url)
        html_content = response.text

        # Парсинг HTML
        soup = BeautifulSoup(html_content, 'html.parser')

        # Найти элемент <select> с id="raspbasesearch-prepod_id"
        select_element = soup.find('select', {'id': 'raspbasesearch-prepod_id'})

        # Извлечь значения атрибута value и соответствующие ФИО
        prepod_data = []
        if select_element:
            options = select_element.find_all('option')
            for option in options:
                if 'value' in option.attrs:
                    value = option['value']
                    fio = option.text.strip()
                    if value and fio:  # Игнорируем пустые значения и ФИО
                        prepod_data.append({'value': value, 'fio': fio})

        # Вывод данных для проверки перед сохранением в JSON
        print("Извлеченные данные:")
        print(prepod_data)

        # Сохранить данные в JSON
        json_data = json.dumps(prepod_data, ensure_ascii=False, indent=4)

        # Сохранение JSON в файл
        with open('prepod_data.json', 'w', encoding='utf-8') as json_file:
            json_file.write(json_data)

        print("Данные успешно сохранены в 'prepod_data.json'")
        text_box.insert(tk.END, "Данные успешно сохранены в 'prepod_data.json'\n")
        text_box.see(tk.END)

        # Вывод данных для проверки после сохранения в JSON
        print("Сохраненные данные в JSON:")
        print(json_data)

    except Exception as e:
        print(f"Ошибка при обновлении данных преподавателей: {e}")
        text_box.insert(tk.END, f"Ошибка при обновлении данных преподавателей: {e}\n")
        text_box.see(tk.END)

# Функция для запуска обновления данных преподавателей в отдельном потоке
def start_update_prepod_data():
    threading.Thread(target=update_prepod_data).start()

# Функция для генерации Excel-отчетов
def generate_excel_reports():
    try:
        # Загрузка данных из JSON
        json_file_path = 'lessons_count.json'
        with open(json_file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)

        # Создание папок для каждого месяца на русском языке
        output_dir = "вычитка"
        os.makedirs(output_dir, exist_ok=True)

        for teacher_id, teacher_data in data.items():
            fio = teacher_data["fio"]
            lessons_count = teacher_data["lessons_count"]

            # Словарь для хранения данных по месяцам
            month_data = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: defaultdict(int))))
            total_hours_per_day = defaultdict(lambda: defaultdict(int))

            for date_str, groups in lessons_count.items():
                # Преобразование строки даты в объект datetime
                date_obj = datetime.strptime(date_str.split(' - ')[1], '%d.%m.%Y')
                month_name = month_names_reverse[date_obj.month]
                day_of_month = date_obj.day

                for group, lessons in groups.items():
                    for lesson in lessons:
                        subject = lesson["lesson_details"]
                        count = lesson["count"]
                        month_data[month_name][subject][group][day_of_month] += count
                        total_hours_per_day[month_name][day_of_month] += count

            for month_name, subjects in month_data.items():
                # Создание файла Excel
                file_name = f"{fio}_{month_name}.xlsx"
                month_dir = os.path.join(output_dir, month_name)
                os.makedirs(month_dir, exist_ok=True)
                file_path = os.path.join(month_dir, file_name)
                wb = Workbook()
                ws = wb.active

                # Заполнение шапки
                ws['A1'] = fio
                ws['A2'] = month_name.capitalize()

                # Определение количества дней в месяце
                year = list(lessons_count.keys())[0].split(' - ')[1].split('.')[2]  # Извлечение года из первой даты
                month_number = month_names[month_name]
                days_in_month = calendar.monthrange(int(year), month_number)[1]

                # Заполнение заголовков таблицы
                ws.append(["", "Предмет", "Группа", "Числа месяца"])
                ws.append(["", "", "", *range(1, days_in_month + 1)])

                # Заполнение дней недели
                month_weekdays = []
                for day in range(1, days_in_month + 1):
                    weekday = datetime(int(year), month_number, day).strftime('%a')
                    month_weekdays.append(weekdays_translation[weekday])
                ws.append(["", "", "", *month_weekdays])
                ws.append([])  # Пустая строка для отступа

                # Заполнение данных
                row_index = 7  # Начинаем с 7-й строки из-за отступа
                for subject, groups in subjects.items():
                    ws[f'B{row_index}'] = subject
                    ws[f'B{row_index}'].font = Font(bold=True)
                    row_index += 1
                    for group, days in groups.items():
                        ws[f'B{row_index}'] = group
                        for day in range(1, days_in_month + 1):
                            ws.cell(row=row_index, column=day + 3, value=days.get(day, 0))
                        row_index += 1

                # Заполнение общего количества часов в день
                total_hours_row = row_index + 1
                ws[f'A{total_hours_row}'] = "Часов в день"
                total_hours_fill = PatternFill(start_color="D3D3D3", end_color="D3D3D3", fill_type="solid")

                for day in range(1, days_in_month + 1):
                    cell = ws.cell(row=total_hours_row, column=day + 3,
                                   value=total_hours_per_day[month_name].get(day, 0))
                    cell.fill = total_hours_fill

                # Заполнение общего количества часов в месяц для каждого предмета у группы
                total_hours_column = days_in_month + 4
                total_hours_column_letter = get_column_letter(total_hours_column)
                ws[
                    f'{total_hours_column_letter}7'] = "Часов в месяц"  # Заголовок на одну строку выше первой строки с данными

                header_fill = PatternFill(start_color="FFCC99", end_color="FFCC99", fill_type="solid")
                for row in range(7, ws.max_row + 1):
                    ws[f'{total_hours_column_letter}{row}'].fill = header_fill

                current_row = 8  # Начинаем с 8-й строки из-за отступа

                # Цвета для чередования строк
                fill_light = PatternFill(start_color="dfedee", end_color="dfedee", fill_type="solid")
                fill_dark = PatternFill(start_color="fae6e6", end_color="fae6e6", fill_type="solid")

                for subject, groups in subjects.items():
                    for group, days in groups.items():
                        total_subject_hours = sum(days.values())
                        ws.cell(row=current_row, column=total_hours_column, value=total_subject_hours)

                        # Применяем цветовую разметку
                        if current_row % 2 == 0:
                            for col in range(1, total_hours_column + 1):
                                if col != total_hours_column:  # Пропускаем столбец "Часов в месяц"
                                    ws.cell(row=current_row, column=col).fill = fill_light
                        else:
                            for col in range(1, total_hours_column + 1):
                                if col != total_hours_column:  # Пропускаем столбец "Часов в месяц"
                                    ws.cell(row=current_row, column=col).fill = fill_dark

                        current_row += 1
                    current_row += 1  # Переход к следующему предмету

                # Сохранение файла
                wb.save(file_path)
                print(f"Файл {file_name} успешно сохранен.")
                text_box.insert(tk.END, f"Файл {file_name} успешно сохранен.\n")
                text_box.see(tk.END)



        print("Генерация Excel-отчетов завершена.")
        text_box.insert(tk.END, "Генерация Excel-отчетов завершена.\n")
        text_box.see(tk.END)

    except Exception as e:
        print(f"Ошибка при генерации Excel-отчетов: {e}")
        text_box.insert(tk.END, f"Ошибка при генерации Excel-отчетов: {e}\n")
        text_box.see(tk.END)



# Создание главного окна
root = tk.Tk()
root.title("Выбор диапазона месяцев")

# Создание выпадающего списка для выбора начального года
current_year = datetime.now().year
years = list(range(2020, current_year + 1))
start_year_combobox = ttk.Combobox(root, values=years)
start_year_combobox.pack(padx=10, pady=10)
start_year_combobox.set(current_year)

# Создание выпадающего списка для выбора начального месяца
start_month_combobox = ttk.Combobox(root, values=list(month_names.keys()))
start_month_combobox.pack(padx=10, pady=10)
start_month_combobox.set("Выберите начальный месяц")

# Создание выпадающего списка для выбора конечного года
end_year_combobox = ttk.Combobox(root, values=years)
end_year_combobox.pack(padx=10, pady=10)
end_year_combobox.set(current_year)

# Создание выпадающего списка для выбора конечного месяца
end_month_combobox = ttk.Combobox(root, values=list(month_names.keys()))
end_month_combobox.pack(padx=10, pady=10)
end_month_combobox.set("Выберите конечный месяц (опционально)")

# Галочка для показа/скрытия деталей обработки
show_details = tk.BooleanVar()
show_details_checkbutton = ttk.Checkbutton(root, text="Показать детали обработки", variable=show_details)
show_details_checkbutton.pack(padx=10, pady=10, anchor='w')

# Полоса загрузки
progress_bar = ttk.Progressbar(root, orient='horizontal', length=300, mode='determinate')
progress_bar.pack(padx=10, pady=10)

# Кнопка для обработки выбранного диапазона месяцев
process_button = ttk.Button(root, text="Обработать диапазон", command=start_processing)
process_button.pack(padx=10, pady=10)

# Кнопка для обновления данных преподавателей
update_prepod_button = ttk.Button(root, text="Обновить преподов", command=start_update_prepod_data)
update_prepod_button.pack(padx=10, pady=10)

# Текстовое поле для вывода логов с прокруткой
text_box = scrolledtext.ScrolledText(root, height=20, width=80, wrap=tk.WORD)
text_box.pack(padx=10, pady=10)

# Запуск главного цикла
root.mainloop()
